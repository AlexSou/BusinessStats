Dim intJ As IntegerDim intNoIterations As IntegerDim dblLambdaDash As DoubleDim dblPjLambdaDash As DoubleDim dblLambdaT As DoubleDim dblExpLamT As DoubleDim dblFactJ As DoubleDim BSRet As DoubleDim dblSigmaJ As DoubleDim dblRateJ As DoubleDim dblRateLamMean As DoubleDim dblLogMean As DoubleDim dblCurrTerm As DoubleDim dblSumTerms As DoubleintNoIterations = 20 'Number of times to add terms.dblFactJ = 1 'First factorial termdblSumTerms = 0'Calculations done before loop to avoid calculating them several times.dblLambdaDash = dblLambda * (1 + dblMeanJump)dblLambdaT = dblLambdaDash * dblTdblExpLamT = Exp(-dblLambdaT)dblRateLamMean = dblIntRate - dblLambda * dblMeanJumpdblLogMean = Log(1 + dblMeanJump) / dblTFor intJ = 0 To intNoIterations    If intJ > 0 Then        dblFactJ = dblFactJ * intJ 'Calculate factorial    End If    dblPjLambdaDash = dblExpLamT * ((dblLambdaT ^ intJ) / dblFactJ)    dblSigmaJ = dblSigma ^ 2 + intJ * (dblSigJump / dblT)    dblRateJ = dblRateLamMean + intJ * dblLogMean    BSRet = BlackScholesCall(dblS, dblSigmaJ, dblDivRate, dblRateJ, dblT, dblStrike)    dblCurrTerm = dblPjLambdaDash * BSRet    dblSumTerms = dblSumTerms + dblCurrTerm    If intJ < 3 Then  'Output first 3 terms.        dblResult((intJ + 1)) = dblCurrTerm    End IfNext intJdblResult(0) = dblSumTermsMertonCallCalc = dblResult   End Function